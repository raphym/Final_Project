#include "ObjectRequest.h"

using namespace std;

///////////////////////////////////////////////////////////////////////////////
//constructor
//////////////////////////////////////////////////////////////////////////////
ObjectRequest::ObjectRequest(string typeOfMessage,std::string packetId, int senderId,int destinationId, std::string message )   //ctor
{
        this->messageType=typeOfMessage;
        this->packetId=packetId;
        this->senderId=senderId;
        this->destinationId=destinationId;
        this->message=message;
        this->header.push_back(0);
        this->counterBackbone=0;
}
///////////////////////////////////////////////////////////////////////////////
//destructor
//////////////////////////////////////////////////////////////////////////////
ObjectRequest::~ObjectRequest() //dtor
{

}
///////////////////////////////////////////////////////////////////////////////
//get the message Type
//////////////////////////////////////////////////////////////////////////////
string ObjectRequest::getmessageType()
{
        return messageType;
}
///////////////////////////////////////////////////////////////////////////////
//get the PacketId
//////////////////////////////////////////////////////////////////////////////
string ObjectRequest::getPacketId()
{
        return packetId;
}
///////////////////////////////////////////////////////////////////////////////
//get the Header of the object request
//////////////////////////////////////////////////////////////////////////////
std::vector<int> & ObjectRequest::getHeader()
{
        return header;
}
///////////////////////////////////////////////////////////////////////////////
//get the SenderId
//////////////////////////////////////////////////////////////////////////////
int ObjectRequest::getSenderId()
{
        return senderId;
}
///////////////////////////////////////////////////////////////////////////////
//get the DestinationId
//////////////////////////////////////////////////////////////////////////////
int ObjectRequest::getDestinationId()
{
        return destinationId;
}
///////////////////////////////////////////////////////////////////////////////
//get the message
//////////////////////////////////////////////////////////////////////////////
string ObjectRequest::getMessage()
{
        return message;
}
///////////////////////////////////////////////////////////////////////////////
//Add To the Header
//////////////////////////////////////////////////////////////////////////////
void ObjectRequest::addToHeader(int idDone)
{
        this->header[0]+=1;
        this->header.push_back(idDone);
}
///////////////////////////////////////////////////////////////////////////////
//set the MessageType
//////////////////////////////////////////////////////////////////////////////
void ObjectRequest::setMessageType(string messageType)
{
        this->messageType=messageType;
}
///////////////////////////////////////////////////////////////////////////////
//pop From the Header
//////////////////////////////////////////////////////////////////////////////
void ObjectRequest::popFromHeader()
{
        if(this->header.size()<=1)
                return;

        this->header[0] = this->header[0] -1;
        this->header.pop_back();
}
///////////////////////////////////////////////////////////////////////////////
//get the Direction To Execute
//////////////////////////////////////////////////////////////////////////////
vector<int> &ObjectRequest::getDirectionToExecute()
{
        return directionToExecute;
}
///////////////////////////////////////////////////////////////////////////////
//return the visited backbones
//////////////////////////////////////////////////////////////////////////////
vector<int> &ObjectRequest::getVisitedBackbones()
{
        return visitedBackbones;
}
///////////////////////////////////////////////////////////////////////////////
//return the Visited Traceroutes
//////////////////////////////////////////////////////////////////////////////
vector<int> &ObjectRequest::getVisitedTraceroutes()
{
        return visitedTraceroutes;
}
///////////////////////////////////////////////////////////////////////////////
//add to the vector VisitedBackbones
//////////////////////////////////////////////////////////////////////////////
void ObjectRequest::addToVisitedBackbones(int backboneDone)
{
        visitedBackbones.push_back(backboneDone);
}
///////////////////////////////////////////////////////////////////////////////
//add to the vector VisitedTraceroutes
//////////////////////////////////////////////////////////////////////////////
void ObjectRequest::addToVisitedTraceroutes(int tracerouteDone)
{
        visitedTraceroutes.push_back(tracerouteDone);
}
///////////////////////////////////////////////////////////////////////////////
//clear the vector directionToExecute
//////////////////////////////////////////////////////////////////////////////
void ObjectRequest::clearDirectionToExecute()
{
        directionToExecute.clear();
}
///////////////////////////////////////////////////////////////////////////////
//pop From DirectionToExecute
//////////////////////////////////////////////////////////////////////////////
void ObjectRequest::popFromDirectionToExecute()
{
        directionToExecute.pop_back();
}
///////////////////////////////////////////////////////////////////////////////
//clear the vector VisitedTraceroutes
//////////////////////////////////////////////////////////////////////////////
void ObjectRequest::clearVisitedTraceroutes()
{
        visitedTraceroutes.clear();
}
///////////////////////////////////////////////////////////////////////////////
//pop From VisitedBackbones
//////////////////////////////////////////////////////////////////////////////
void ObjectRequest::popFromVisitedBackbones()
{
        visitedBackbones.pop_back();
}
///////////////////////////////////////////////////////////////////////////////
//get the counter value of backbone that have been traversed
//////////////////////////////////////////////////////////////////////////////
int ObjectRequest::getCounterBackbone()
{
        return this->counterBackbone;
}
///////////////////////////////////////////////////////////////////////////////
//increment the counter value of backbone that have been traversed
//////////////////////////////////////////////////////////////////////////////
void ObjectRequest::incrementCounterBackbone()
{
        this->counterBackbone++;
}
///////////////////////////////////////////////////////////////////////////////
//decrement the counter value of backbone that have been traversed
//////////////////////////////////////////////////////////////////////////////
void ObjectRequest::decrementCounterBackBone()
{
        this->counterBackbone--;
}
